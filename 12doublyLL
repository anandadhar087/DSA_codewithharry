#include <iostream>
using namespace std;

// Structure for a doubly linked list node
struct Node {
    int data;        // Data field
    Node* next;      // Pointer to the next node
    Node* prev;      // Pointer to the previous node
};

// Function to traverse the list forward
void traverseForward(Node* head) {
    Node* ptr = head;
    cout << "Traversing forward:" << endl;
    while (ptr != nullptr) {
        cout << "Element: " << ptr->data << endl;
        ptr = ptr->next;
    }
}

// Function to traverse the list backward
void traverseBackward(Node* tail) {
    Node* ptr = tail;
    cout << "Traversing backward:" << endl;
    while (ptr != nullptr) {
        cout << "Element: " << ptr->data << endl;
        ptr = ptr->prev;
    }
}

int main() {
    // Declare pointers to Nodes
    Node* head, * second, * third, * fourth;

    // Allocate memory for nodes
    head = new Node;
    second = new Node;
    third = new Node;
    fourth = new Node;

    // Link first and second nodes
    head->data = 7;
    head->next = second;
    head->prev = nullptr; // Head has no previous node

    // Link second and third nodes
    second->data = 11;
    second->next = third;
    second->prev = head;

    // Link third and fourth nodes
    third->data = 41;
    third->next = fourth;
    third->prev = second;

    // Terminate the list at the fourth node
    fourth->data = 66;
    fourth->next = nullptr;
    fourth->prev = third;

    // Traverse the list forward
    traverseForward(head);

    // Traverse the list backward
    traverseBackward(fourth);

    // Free allocated memory to avoid memory leaks
    delete head;
    delete second;
    delete third;
    delete fourth;

    return 0;
}
